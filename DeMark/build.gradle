plugins {
    id 'org.jetbrains.intellij' version '0.3.1'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.8.2'
}

// setting up jacoco to use all sources for report
jacocoTestReport {
    additionalSourceDirs = files(sourceSets.main.java.srcDirs)
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

// making sure coveralls sees the sources that it needs.
coveralls {
    sourceDirs = files(sourceSets.main.java.srcDirs).files.absolutePath
}

repositories {
    mavenCentral()
}


group 'DeFacto-UW'
version 'Beta-0.3'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.jetbrains.intellij'      // applying the gradle intellij plugin

sourceCompatibility = 1.8

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

// setting up the runIde task
intellij {
    version 'IC-2018.1.2'
    plugins 'coverage'
    pluginName 'DeMark'

    publish {
        apply from: "gradle.properties"
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'src/main/resources']
        }
    }

    test {
        java {
            srcDirs = ['src/tests/java']
            exclude "**/__testData__"
        }
    }
}

// stuff for the generated plugin xml
patchPluginXml {
    version = "Beta-0.3"
    sinceBuild = "173"

    changeNotes =
    """
    Version Beta-0.3
    - Fixed bug with highlighting.
    """

    pluginDescription =
    """
    One common way for a developers to debug through their code is by adding temporary, non-production lines of code, such as print statements, to understand the program’s state, but it can be a tedious task to manage them manually.
    DeMark is a plugin that is used to keep track of temporary debug code. It allows this by letting the user putting a special bookmark on lines of code and highligting them, essentially "marking" them as debug code.
    It aims to increase software developers’ programming productivity by facilitating the management of temporary code.
    """
}